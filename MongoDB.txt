// MongoDB is a general-purpose document database (Similer to JSON objects). 

//*Developer data platform
//*Database as a service

//Atlas, MongoDB's cloud based developer data platform.

//*Operational insights
//*Backups with point-in-time restore
//*Online Archive
//* 2 types 
//*Servesless instances
//*Cluters => 1- Shared
// *          2- Dedicated

////Document (offers a flexible and developer-friendly way to work with data) is the basic unit of data in MongoDB.
////Collection is a grouping of those  documents.
////Database is a container for collections.

//Data types
//All JSON data types
//Dates, Numbers, ObjectIDs and more!

//ObjectID to create unique identifiers.
//*Every document requires an _id field, which acts as a primary key.

////** MongoDB flexible schema (Optional schema validation)
////**Polymorphic documents
////**Iterate quickly and evole

//Connection String
//Allows us to connect to our cluster and workwith our data.
//*Standart format
//*DNS seed list format

//Standart format: Used to connect to standalone clusters, replica sets, or shared clusters.
//DNS seed list format: Provides a DNS server list to our connection string.
//DNS gives more flexiblity of deployment ability to change servers in rotation without reconfiguring clients.

//***MongoDB shell is a Node.js REPL environment.
+ This gives us access to JS variables, functions, conditionals, Loops, control flow statments inside of the shell.
+ Located the MongoDB shell connection string.
+ Connected to the MongoDB sell by using the connection string.
+ Used the Node.js REPL environment to create JS expressions.

//MongoDB Compass
It is a graphical user interface, or GUI, that allows us to query and analyse our data, and compose aggregation pipelines.
MongoDB drives connect our application to our database by using a connection string.
***User authentication protects access to our data!

//CRUD Operations
Insert and find document
+insertOne() =>for single db.bclubmember.insertOne()
+insertMany() =>for multiple db.bclubmembers.insertMany()

$in operator allows us to select all documents that have a field value equal to any of the values specified in the array.
$eq operator to find documents with a field and value.
$in operator to select documents equal to the values specified with in the array.

Finding documents by using compararison operators:
$gt(greater than)
$gte(greater than or equal to)
$lt(less than)
$lte(less than or equal to)

//Query arrays in documents:
$elemMatch: { $eq:" "}
db.books.find({genre:["Historical", "Finctional"]})

//Finding documents $and $or
db.Collection.find({<expression>, <expression>) =>and
db.routes.find({$and:[{$or:[{dst_aitport:"SEA"}]}]})

//Replace documents
*replaceOne()
db.collection.replaceOne(filter, replacement, options)
filter: A query that matches the document to replace.
replacement: The new document to replace to old one.
options: An object that specifies options for the replacement.

*updateOne()
Update operators:
$set and $pushdb.collection.updateOne(<filter>, <update>, {options})
$set operator: Adds new fields and values to a document
               Replaces the value of a field with a specified value.


//A good data model can:
->Make it easier to manage data.
->Make queries more efficient
->Useless memory an CPU
->Reduce cost

***Data that is accessed together should be stored together.

Relationship types:
one-to-one: A relationship where a data entity in one set is connected to exactly one data entity in another set.
one-to-many
many-to-many

Ways to model Relationship
Embedding
Referencing

Atlas 
Product Family
Data Explorer
Performans Advisor